> Part 1: Linking questions
***
> Translation of sum-main.ys to an object file:
---answer---
0x000:                      | main:
0x000: 30f71e00000000000000 |         irmovq $array, %rdi
0x00a: 30f60400000000000000 |         irmovq $4, %rsi
0x014: 800000000000000000   |         call sum
0x01d: 00                   |         halt
                            | 
0x01e:                      | array:
0x01e: 0000341200003412     |         .quad 0x1234000012340000
0x026: 3412000034120000     |         .quad 0x0000123400001234
0x02e: 0000214300002143     |         .quad 0x4321000043210000
0x036: 2143000021430000     |         .quad 0x0000432100004321
***
0x15,sum
***
0x00,main
0x1e,array
---end of answer---
---comments---
Copy/pasted the main machine code. Only real problems were the 
relocation table and stuff. For the relocation table, only one value 
needed to be "relocated" this was the address of where the sum 
function is and was included in the relocation table. The symbol table
 was populated with the addresses of the main function and location of
 the array.

---end of comments---

***
> Translation of sum.ys to an object file:
---answer---
0x000:                      | sum:
0x000: 30f80800000000000000 |   irmovq $8, %r8
                            |         # rsi (count in bytes) = rsi 
(count) * 8

0x00a: 6066                 |   addq %rsi, %rsi
0x00c: 6066                 |   addq %rsi, %rsi
0x00e: 6066                 |   addq %rsi, %rsi
                            |         # rsi (address of end) = rsi + 
rdi (array base address)

0x010: 6076                 |   addq %rdi, %rsi
                            |         # rax (sum) = 0
0x012: 6300                 |         xorq %rax, %rax
0x014:                      | sum_loop:
                            |         # end = end - 8
0x014: 6186                 |   subq %r8, %rsi
                            |         # if (end - base < 0 AKA end < 
base) break

0x016: 2069                 |         rrmovq %rsi, %r9
0x018: 6179                 |         subq %rdi, %r9
0x01a: 723800000000000000   |         jl end_sum_loop
                            |         # sum += *end
0x023: 50960000000000000000 |         mrmovq (%rsi), %r9
0x02d: 6090                 |         addq %r9, %rax
0x02f: 701400000000000000   |         jmp sum_loop
0x038:                      | end_sum_loop:
0x038: 90                   |         ret
***
***
0x0, start
0x14, sum_loop
0x38, end_sum_loop
---end of answer---
---comments---
Copy/pasted the main machine code. Only real problems were the 
relocation table and stuff. For the relocation table, no values were 
placed because all needed values for this function are self-contained 
within the machine code and it is unnecessary to have any 
replacements. The symbol table was just populated with the addresses 
of the labels.

---end of comments---

