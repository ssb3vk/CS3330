Size       Cycles/Element for sum_clang6_O: simple C compiled with clang 6 -O -mavx2
1048576       0.20

Size       Cycles/Element for sum_gcc7_O3: simple C compiled with GCC7 -O3 -mavx2
1048576       0.21

Size       Cycles/Element for sum_C: simple C compiled on this machine with settings in Makefile
1048576       1.13

Size       Cycles/Element for sum_multiple_accum_C: sum_C but with 4 accumulators
1048576       0.49

Size       Cycles/Element for sum_simple: simple ASM implementation
1048576       3.52

Size       Cycles/Element for sum_unrolled2: sum-simple but two elements per iteration
1048576       0.90

Size       Cycles/Element for sum_unrolled4: sum_simple but 4 elements per iteration
1048576       0.88

Size       Cycles/Element for sum_multiple_accum: uses multiple accumulators of sum_unrolled4
1048576       0.71

In this lab 4 programs were created: 
	- sum_unrolled2: 0.90 
	- sum_unrolled4: 0.88
	- sum_multiple_accum: 0.71
	- sum_multiple_accum_C: 0.49
And listed are the cycles/element. The naive ASM implementation had a cycles/element of 3.52. Below lists the factor of times quicker the custom programs were over the naive ASM implementation: 

In this lab 4 programs were created: 
	- sum_unrolled2: 3.52/0.90 = 3.9111
	- sum_unrolled4: 3.52/0.88 = 4.0000
	- sum_multiple_accum: 3.52/0.71 = 4.9577
	- sum_multiple_accum_C: 3.52/0.49 = 7.1837

This indicates that even the simplest form of loop unrolling can create nearly a factor of 4 times improvement, with diminsihign returns. 
